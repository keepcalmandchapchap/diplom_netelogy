# Generated by Django 5.2 on 2025-05-18 20:10

import django.db.models.deletion
import shop_api.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True, verbose_name='Название должности')),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должности',
            },
        ),
        migrations.CreateModel(
            name='Trial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('lastname', models.CharField(max_length=10)),
                ('age', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='surame')),
                ('date_joined', models.DateField(auto_now_add=True, verbose_name='registered')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='is_staff')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='is_superuser')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', shop_api.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('street', models.CharField(max_length=300, verbose_name='Улица')),
                ('house', models.CharField(max_length=10, verbose_name='Дом')),
                ('building', models.CharField(blank=True, max_length=10, null=True, verbose_name='Строение')),
                ('floor', models.PositiveIntegerField(blank=True, null=True, verbose_name='Этаж')),
                ('appartment', models.PositiveIntegerField(verbose_name='Квартира')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адреса',
                'unique_together': {('city', 'street', 'house', 'building', 'appartment')},
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='Название')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Цена')),
                ('quantity', models.PositiveIntegerField(verbose_name='Количество')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Время обновления')),
                ('vendor', models.ForeignKey(help_text='Ссылка на пользователя, так как думаю так логичнее', on_delete=django.db.models.deletion.PROTECT, related_name='items', to=settings.AUTH_USER_MODEL, verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('items', models.ManyToManyField(related_name='categories', to='shop_api.item', verbose_name='Товары')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.CharField(choices=[('basket', 'Корзина'), ('created', 'Заказ создан'), ('collecting', 'Собирается'), ('collected', 'Собран'), ('shipped', 'Отгружен'), ('delivered', 'Доставлен'), ('canceled', 'Отказ')], default='basket', verbose_name='Статус')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
                ('total_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Общая сумма')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_at', models.DateTimeField(auto_now=True, verbose_name='Время обновления')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Время закрытия')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='order', to='shop_api.address', verbose_name='Адрес')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(verbose_name='Количество')),
                ('price_at_order', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена на момент заказа')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shop_api.item', verbose_name='Товар')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_api.order', verbose_name='Заказ')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='items',
            field=models.ManyToManyField(through='shop_api.OrderItem', to='shop_api.item', verbose_name='Товары'),
        ),
        migrations.CreateModel(
            name='StaffInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
                ('manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='info_as_manager', to=settings.AUTH_USER_MODEL, verbose_name='Руководитель')),
                ('position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staff', to='shop_api.position', verbose_name='Должность')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='info_as_staff', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Информация о сотруднике',
                'verbose_name_plural': 'Информация о сотрудниках',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_info', models.CharField(choices=[('phone', 'Номер телефона'), ('sex', 'Пол'), ('birthdate', 'День рождения')], verbose_name='Тип характеристики')),
                ('value_info', models.CharField(max_length=120, verbose_name='Значение характеристики')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='info_as_user', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Информация о пользователе',
                'verbose_name_plural': 'Информация о пользователях',
            },
        ),
        migrations.CreateModel(
            name='VendorInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='Название')),
                ('inn', models.CharField(max_length=12, unique=True, verbose_name='ИНН')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='vendor', to='shop_api.address', verbose_name='Адрес')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='info_as_vendor', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Иноформация о сотруднике',
                'verbose_name_plural': 'Информация о сотрудниках',
            },
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['vendor'], name='shop_api_it_vendor__30e67f_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order'], name='shop_api_or_order_i_f36fec_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['item'], name='shop_api_or_item_id_b467ff_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='orderitem',
            unique_together={('order', 'item')},
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['state'], name='shop_api_or_state_2eee08_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user', 'state'], name='shop_api_or_user_id_3e594b_idx'),
        ),
        migrations.AddIndex(
            model_name='staffinfo',
            index=models.Index(fields=['user'], name='shop_api_st_user_id_0c1cbc_idx'),
        ),
        migrations.AddIndex(
            model_name='staffinfo',
            index=models.Index(fields=['manager'], name='shop_api_st_manager_bd5862_idx'),
        ),
        migrations.AddIndex(
            model_name='staffinfo',
            index=models.Index(fields=['position'], name='shop_api_st_positio_477d69_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userinfo',
            unique_together={('user', 'type_info')},
        ),
    ]
